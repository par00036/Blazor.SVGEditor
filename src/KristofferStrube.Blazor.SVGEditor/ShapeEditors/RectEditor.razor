@inherits ShapeEditor<Rect>

<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
   <rect @ref=ElementReference
   @onfocusin="FocusElement"
   @onfocusout="UnfocusElement"
   @onpointerdown="SelectAsync"
   @onkeyup="KeyUp"
         tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
         x=@SVGElement.X.AsString()
         y=@SVGElement.Y.AsString()
         width=@SVGElement.Width.AsString()
         height=@SVGElement.Height.AsString()
         stroke="@SVGElement.Stroke"
         stroke-width="@SVGElement.StrokeWidth"
         stroke-linecap="@SVGElement.StrokeLinecap.AsString()"
         stroke-linejoin="@SVGElement.StrokeLinejoin.AsString()"
         stroke-dasharray="@SVGElement.StrokeDasharray"
         stroke-dashoffset="@SVGElement.StrokeDashoffset.AsString()"
         fill="@SVGElement.Fill">
      @foreach (BaseAnimate animate in SVGElement.AnimationElements)
      {
            var Parameters = new Dictionary<string, object> { { "SVGElement", animate } };
            <DynamicComponent Type=animate.Presenter Parameters=Parameters />
      }
   </rect>
    @if (SVGElement.Selected && SVGElement.SVG.EditMode is not EditMode.Add)
    {
        <Anchor OnPointerDown="() => AnchorSelect(0)" Position="(SVGElement.X, SVGElement.Y)" />
        <Anchor OnPointerDown="() => AnchorSelect(1)" Position="(SVGElement.X + SVGElement.Width, SVGElement.Y)" />
        <Anchor OnPointerDown="() => AnchorSelect(2)" Position="(SVGElement.X + SVGElement.Width, SVGElement.Y + SVGElement.Height)" />
        <Anchor OnPointerDown="() => AnchorSelect(3)" Position="(SVGElement.X, SVGElement.Y + SVGElement.Height)" />
    }
</ContextMenuTrigger>